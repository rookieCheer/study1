<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">
    <!-- 让Spring通过自动扫描来查询和管理Bean -->
    <context:component-scan base-package="com.huoq"/>
    <!--	<aop:aspectj-autoproxy />-->
    <!-- 使Spring关注Annotation -->
    <context:annotation-config/>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!--
                    <prop
                    key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                -->
                <prop key="hibernate.dialect">com.huoq.common.MysqlDailetExtend</prop>
                <prop key="hibernate.show_sql">false</prop>
                <!--<prop key="hibernate.format_sql">false</prop>-->
                <!--<prop key="hibernate.use_sql_comments">true</prop>  -->
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->
                <prop key="hibernate.jdbc.batch_size">150</prop>
                <prop key="hibernate.jdbc.fetch_size">150</prop>
            </props>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:com/huoq/orm/*.hbm.xml</value>
                <value>classpath:com/huoq/newbranch/orm/*.hbm.xml</value>
            </list>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="defaultTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="defaultTransactionManager" proxy-target-class="true"/>
    <bean id="propertyConfigurer"
          class="com.huoq.filter.EncryptablePropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:app.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url">
            <value>jdbc:mysql://${jdbc.ipPort}/${jdbc.database}?user=${jdbc.username}&amp;password=${jdbc.password}&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useOldAliasMetadataBehavior=true</value>
        </property>
        <property name="username">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.dataSource.initialSize}"/>
        <property name="minIdle" value="${jdbc.dataSource.minIdle}"/>
        <property name="maxActive" value="${jdbc.dataSource.maxActive}"/>
        <!-- <property name="removeAbandoned" value="true"/> -->
        <!-- 超过时间限制多长； 秒-->
        <!-- <property name="removeAbandonedTimeout" value="180000"/> --> <!-- 1800秒，也就是30分钟 -->
        <!-- <property name="logAbandoned" value="true"/> --> <!-- 关闭abanded连接时输出错误日志 -->
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 自动清除无用连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 清除无用连接的等待时间 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 连接属性 -->
		<property name="connectionProperties" value="config.decrypt=true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <!-- <property name="timeBetweenEvictionRunsMillis" value="60000"/> -->

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <!-- <property name="minEvictableIdleTimeMillis" value="300000"/> -->

        <property name="validationQuery" value="SELECT 1 "/>
        <!-- <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/> -->

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <!-- <property name="filters" value="stat"/> -->
    </bean>
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>


    <bean id="SimpleJdbcTemplate"
          class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
        <constructor-arg>
            <ref bean="dataSource"/>
        </constructor-arg>
    </bean>

    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg>
            <ref bean="dataSource"/>
        </constructor-arg>
    </bean>
    <import resource="beans_all.xml"/>

</beans>
